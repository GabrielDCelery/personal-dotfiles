# HOMEBREW *******************************************************************************************************************************************************
# the below block looks for the "brew" executable at different locations and if it finds it
# then executes "brew shellenv" which sets up necessary homebrew environment variables
HOMEBREW_LINUX_PATH="/home/linuxbrew/.linuxbrew/bin/brew"
HOMEBREW_APPLE_PATH="/opt/homebrew/bin/brew"
HOMEBREW_INTEL_PATH="/usr/local/bin/brew"

if [ -e "$HOMEBREW_APPLE_PATH" ]; then
    eval "$($HOMEBREW_APPLE_PATH shellenv)"
elif [ -e "$HOMEBREW_INTEL_PATH" ]; then
    eval "$($HOMEBREW_INTEL_PATH shellenv)"
elif [ -e "$HOMEBREW_LINUX_PATH" ]; then
    eval "$($HOMEBREW_LINUX_PATH shellenv)"
fi


# WEZTERM ********************************************************************************************************************************************************
# by default wezterm looks for its configuration at the ~/.config/wezterm/wezterm.lua location, this sets it to the home dir
export WEZTERM_CONFIG_FILE="$HOME/.wezterm.lua"


# XDCONFIG *******************************************************************************************************************************************************
# the env variable XDG_CONFIG_HOME is a standard for defining the location for user specific configurations so we set it to ~/.config
export XDG_CONFIG_HOME="$HOME/.config"


# CLI COMPLETIONS ************************************************************************************************************************************************
# initialize completion system, -U means unique entries and -z means without aliases
autoload -Uz compinit
# Do a full completion system initialization if:
# - .zcompdump doesn't exist, or
# - .zcompdump is more than 24 hours old
if [[ ! -f "$HOME/.zcompdump" ]] || [[ -n "$(find "$HOME/.zcompdump" -type f -mtime +1 2>/dev/null)" ]]; then
  ( compinit >/dev/null 2>&1 & ) >/dev/null 2>&1
else
  ( compinit -C >/dev/null 2>&1 & ) >/dev/null 2>&1
fi


# CLI SYNTAX HIGHLIGHTING ****************************************************************************************************************************************
# setting up syntax higlighting in the terminal
# - highlights valid commands in green
# - showing errors in red
# - highlighting paths, options and arguments differently
source $HOMEBREW_PREFIX/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh


# CLI AUTOSUGGESTIONS ********************************************************************************************************************************************
# autosuggestions based on command history
source $HOMEBREW_PREFIX/share/zsh-autosuggestions/zsh-autosuggestions.zsh
# shift tab to accept autosuggestion
bindkey '^[[Z'      autosuggest-accept
# do autosuggestions in an async manner for performance gains
ZSH_AUTOSUGGEST_USE_ASYNC=true
# disable autosuggestions for large buffers
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
# use both history AND completion for better suggestions
ZSH_AUTOSUGGEST_STRATEGY=(history completion)
# clear autosuggestions when any of the below scenarios happen
# - buffer-empty - when the command line becomes empty
# - bracketed-paste - when text is pasted into the terminal
# - accept-line - when pressing enter to execute a command
# - push-line-or-edit - when using the push-line-feature (typically Alt+Q) which saves the current line and gives a new prompt
ZSH_AUTOSUGGEST_CLEAR_WIDGETS+=(buffer-empty bracketed-paste accept-line push-line-or-edit)
# change autosuggestion color to grey to make it more visible
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'
# improve autosuggestion performance on large history
# - exclude cd commands in history based suggestions since those are unlikely to get reused
# - exclude git from the completion system since it has its own comprehensive system
ZSH_AUTOSUGGEST_HISTORY_IGNORE="cd *"
ZSH_AUTOSUGGEST_COMPLETION_IGNORE="git *"


# ****************************************************************************************************************************************************************
# load completion menu and configure style
# enable menu eslection where you can use the arrow keys to navigate through completions
zstyle ':completion:*' menu select
# make completion case insensitive
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' # case insensitive completion
# _expand: Expands variables and aliases
# _complete: Regular completion
# _ignored: Also show ignored completions
# _approximate: Allows for approximate matching (typo correction)
zstyle ':completion:*' completer _expand _complete _ignored _approximate
# make the completion menu more visually appealing
# show more detailed information
zstyle ':completion:*' verbose yes
# descriptors in green
zstyle ':completion:*:*:*:*:descriptions' format '%F{green}-- %d --%f'
# messages in purple
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
# warnings in red
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'


# GPG ************************************************************************************************************************************************************
# allow the gpg agent to interact with the terminal
# set the GPG_TTY env variable to the current terminal device, this is important so GPG can interact with the terminal and do things like prompting for password
export GPG_TTY=$(tty)
# set the directory where GPG stores the encryption keys, trust database and configuration files
export GNUPGHOME="$HOME/.gnupg"


# STOW ***********************************************************************************************************************************************************
# some binaries get stored in dotfiles so want to extend the $PATH with that location
# TODO: does not look like the correct way to do, let's revisit and see if I can do better
export PATH="$HOME/.dotfiles/.local/bin:$PATH"


# AWS VAULT ******************************************************************************************************************************************************
# make aws-vault use pass as its backend storage system
export AWS_VAULT_BACKEND=pass
# specify where pass witll store the credentials managed by aws vault
export AWS_VAULT_PASS_PASSWORD_STORE_DIR=~/.password-store/aws-vault


# DIRENV *********************************************************************************************************************************************************
# generate shell specific code for zsh
# - monitor when we change directories
# - automatically load env variables from .envrc when entering a directory and unloading them when leading the dir
eval "$(direnv hook zsh)"

# BAT
export BAT_CONFIG_PATH="$(bat --config-file)"
export BAT_CONFIG_DIR="$(bat --config-dir)"
export BAT_THEME="Catppuccin Mocha"

# ZOXIDE
eval "$(zoxide init zsh)"

# FZF
source <(fzf --zsh)
export FZF_CTRL_T_COMMAND="fd --hidden --strip-cwd-prefix --exclude .git"
export FZF_ALT_C_COMMAND="fd --type=d --hidden --strip-cwd-prefix --exclude .git"
export FZF_DEFAULT_OPTS="--height=62% --layout=default --border --color=hl:#2dd4bf"
export FZF_TMUX_OPTS=" -p90%,70%"
export FZF_CTRL_T_OPTS="--preview 'bat --color=always -n --line-range :500 {}'"
export FZF_ALT_C_OPTS="--preview 'eza --tree --color=always {} | head -200'"

# aliases
alias ps='grc ps'
alias ls='grc ls'
alias k='grc kubectl'
alias netstat='grc netstat'
alias e='eza'
alias dig='grc dig'
alias traceroute='grc traceroute'


# NEOVIM *********************************************************************************************************************************************************
# make neovim the default editor
export EDITOR='nvim'
# setting neovim to be the default manpage viewer
# +Man! is a neovim command that loads neovim built-in manpage viewer and ! at the end forces it to start in "Man mode"
export MANPAGER='nvim +Man!'
# This will make man pages use the full width of the terminal window, without it they would wrap around 80 characters
export MANWIDTH=999
# use nvimc to cd into where there is the neovim configuration and open it with neovim
alias nvimc='cd $HOME/.config/nvim && nvim'


# PYTHON *********************************************************************************************************************************************************
# run shell specific initializations for zsh
# - set up shims (lightweight executables) in the $PATH
# - registers pyenv's shell function for version switching
# - set up command completion for pyenv commands
# - install shell hooks to automatically swithc pythong versions when switching between directories
eval "$(pyenv init - zsh)"
# alias the python command to use python3
alias python='"$(which python3)"'
# alias the pip command to use pip3
alias pip='"$(which pip3)"'


# NODEJS *********************************************************************************************************************************************************
# N version manger setup
export N_PREFIX="$HOME/.n"
export PATH="$N_PREFIX/bin:$PATH"


# GOLANG *********************************************************************************************************************************************************
# the env GOPATH is the go workspace directory where it manages its source code, packages and compiled binaries, this sets the default gopath from go's own environment
export GOPATH=$(go env GOPATH)
# the env GOBIN specifies where go should install executable programs when using "go install"
export GOBIN=$GOPATH/bin
# make GOBIN part of path
export PATH=$PATH:$GOBIN


# RUST ***********************************************************************************************************************************************************
# when using cargo install those binaries will be in ~/.cargo/bin, so we need to add that dir to PATH
export PATH="$HOME/.cargo/bin:$PATH"


# PERSONAL NOTES ************************************************************************************************************************************************ 
export PATH="$PATH:$HOME/.local/bin"
export PERSONAL_NOTES_DIR=$HOME/notes
export PERSONAL_NOTES_INBOX_DIR=$HOME/notes/inbox
export PERSONAL_NOTES_TEMPLATE=$HOME/notes/templates/default.md
export PERSONAL_NOTES_DEFAULT_AUTHOR=GaborZeller


# RUBY ***********************************************************************************************************************************************************
export PATH="$(gem environment gemdir)/bin:$PATH"


# STARSHIP *******************************************************************************************************************************************************
eval "$(starship init zsh)"
export STARSHIP_RELOAD=true

# not using NVM atm in favor of N, but leaving it here for now
# NVM
# export NVM_DIR="$HOME/.nvm"
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
